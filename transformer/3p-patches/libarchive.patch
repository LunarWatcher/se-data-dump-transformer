diff --git a/CMakeLists.txt b/CMakeLists.txt
index 042f151e..a23dfc84 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -519,24 +519,13 @@ ENDIF()
 IF(LIBLZMA_FOUND)
   SET(HAVE_LIBLZMA 1)
   SET(HAVE_LZMA_H 1)
-  CMAKE_PUSH_CHECK_STATE()
-  SET(CMAKE_REQUIRED_INCLUDES ${LIBLZMA_INCLUDE_DIR})
-  SET(CMAKE_REQUIRED_LIBRARIES ${LIBLZMA_LIBRARIES})
+  set(HAVE_LZMA_STREAM_ENCODER_MT ON)
+  #SET(CMAKE_REQUIRED_INCLUDES ${LIBLZMA_INCLUDE_DIRS})
+  #SET(CMAKE_REQUIRED_LIBRARIES ${LIBLZMA_LIBRARIES})
   INCLUDE_DIRECTORIES(${LIBLZMA_INCLUDE_DIRS})
+
   LIST(APPEND ADDITIONAL_LIBS ${LIBLZMA_LIBRARIES})
-  # Test if a macro is needed for the library.
-  TRY_MACRO_FOR_LIBRARY(
-    "${LIBLZMA_INCLUDE_DIRS}" "${LIBLZMA_LIBRARIES}"
-    COMPILES
-    "#include <lzma.h>\nint main() {return (int)lzma_version_number(); }"
-    "WITHOUT_LZMA_API_STATIC;LZMA_API_STATIC")
-  CHECK_C_SOURCE_COMPILES(
-    "#include <lzma.h>\n#if LZMA_VERSION < 50020000\n#error unsupported\n#endif\nint main(void){int ignored __attribute__((unused)); ignored = lzma_stream_encoder_mt(0, 0); return 0;}"
-    HAVE_LZMA_STREAM_ENCODER_MT)
-  IF(NOT WITHOUT_LZMA_API_STATIC AND LZMA_API_STATIC)
-    ADD_DEFINITIONS(-DLZMA_API_STATIC)
-  ENDIF(NOT WITHOUT_LZMA_API_STATIC AND LZMA_API_STATIC)
-  CMAKE_POP_CHECK_STATE()
+  ADD_DEFINITIONS(-DLZMA_API_STATIC)
 ELSE(LIBLZMA_FOUND)
 # LZMA not found and will not be used.
   SET(HAVE_LZMA_STREAM_ENCODER_MT 0)
@@ -664,16 +653,12 @@ IF(ZSTD_FOUND)
   SET(HAVE_ZSTD_H 1)
   INCLUDE_DIRECTORIES(${ZSTD_INCLUDE_DIR})
   LIST(APPEND ADDITIONAL_LIBS ${ZSTD_LIBRARY})
-  CMAKE_PUSH_CHECK_STATE()
-  SET(CMAKE_REQUIRED_LIBRARIES ${ZSTD_LIBRARY})
-  SET(CMAKE_REQUIRED_INCLUDES ${ZSTD_INCLUDE_DIR})
-  CHECK_FUNCTION_EXISTS(ZSTD_decompressStream HAVE_LIBZSTD)
-  CHECK_FUNCTION_EXISTS(ZSTD_compressStream HAVE_ZSTD_compressStream)
-  CHECK_FUNCTION_EXISTS(ZSTD_minCLevel HAVE_ZSTD_minCLevel)
-  #
-  # TODO: test for static library.
-  #
-  CMAKE_POP_CHECK_STATE()
+  #SET(CMAKE_REQUIRED_LIBRARIES ${ZSTD_LIBRARY})
+  #SET(CMAKE_REQUIRED_INCLUDES ${ZSTD_INCLUDE_DIR})
+  set(HAVE_LIBZSTD ON)
+  set(HAVE_ZSTD_compressStream ON)
+  set(HAVE_ZSTD_minCLevel ON)
+
 ENDIF(ZSTD_FOUND)
 MARK_AS_ADVANCED(CLEAR ZSTD_INCLUDE_DIR)
 MARK_AS_ADVANCED(CLEAR ZSTD_LIBRARY)
